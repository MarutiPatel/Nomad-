import React, { useState, useRef, useEffect } from 'react';
import { 
  MapPin, Camera, Heart, MessageCircle, Share, Plus, Filter, Search, Map, Grid, List, Clock, Star, Eye,
  Edit, Save, X, Trash2, Play, Video, FileText, Mic, MoreHorizontal, Bookmark, Flag, Send, Smile,
  Zap, Globe, Shield, Users, Lock, Timer, TrendingUp, Calendar, Navigation, CloudRain, Sun, 
  ThumbsUp, Laugh, Angry, Sad, ChevronDown, ChevronUp, Reply, Hash, AtSign, Paperclip, 
  Download, Upload, BarChart3, Image as ImageIcon, Volume2, VolumeX, RotateCcw, Copy,
  Layers, Compass, Target, Award, Flame, Coffee, Mountain, Plane, Music, Utensils, Building,
  Activity, Wifi, Battery, Signal, MapPin as LocationPin, AlertCircle, CheckCircle, Info
} from 'lucide-react';

interface Footprint {
  id: string;
  location: string;
  coordinates: { lat: number; lng: number };
  title: string;
  description: string;
  mediaType: 'photo' | 'video' | 'voice' | 'text' | 'gallery';
  mediaUrls: string[];
  timestamp: Date;
  likes: number;
  comments: FootprintComment[];
  visibility: 'public' | 'private' | 'friends' | 'followers';
  tags: FootprintTag[];
  isLiked: boolean;
  isBookmarked: boolean;
  reactions: FootprintReaction[];
  views: number;
  weather?: WeatherData;
  mood?: string;
  travelBuddies?: string[];
  isEditing?: boolean;
  isFeatured?: boolean;
  expiresAt?: Date;
  collaborators?: string[];
  altitude?: number;
  accuracy?: number;
}

interface FootprintComment {
  id: string;
  userId: string;
  userName: string;
  userAvatar: string;
  content: string;
  timestamp: Date;
  likes: number;
  replies: FootprintComment[];
  isLiked: boolean;
}

interface FootprintTag {
  id: string;
  name: string;
  color: string;
  category: 'location' | 'activity' | 'mood' | 'food' | 'transport' | 'custom';
  isAutoGenerated?: boolean;
}

interface FootprintReaction {
  type: 'like' | 'love' | 'laugh' | 'wow' | 'sad' | 'angry';
  count: number;
  users: string[];
  isUserReacted: boolean;
}

interface WeatherData {
  temperature: number;
  condition: 'sunny' | 'cloudy' | 'rainy' | 'snowy' | 'windy';
  icon: string;
  humidity: number;
}

interface ViewMode {
  type: 'grid' | 'list' | 'map' | 'timeline' | 'masonry';
  label: string;
  icon: React.ComponentType<any>;
}

function FootprintsPage() {
  const [viewMode, setViewMode] = useState<ViewMode['type']>('grid');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedFootprint, setSelectedFootprint] = useState<Footprint | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterTag, setFilterTag] = useState('');
  const [sortBy, setSortBy] = useState<'recent' | 'popular' | 'trending' | 'views'>('recent');
  const [showFilters, setShowFilters] = useState(false);
  const [playingAudio, setPlayingAudio] = useState<string | null>(null);
  const [showComments, setShowComments] = useState<string | null>(null);
  const [selectedTags, setSelectedTags] = useState<string[]>([]);

  const mockFootprints: Footprint[] = [
    {
      id: '1',
      location: 'Goa Beach, India',
      coordinates: { lat: 15.2993, lng: 74.1240 },
      title: 'Sunset Paradise',
      description: 'Amazing sunset view with fellow travelers. The beach was perfect for evening walks and the local food was incredible! Met some amazing people from around the world.',
      mediaType: 'photo',
      mediaUrls: ['https://images.pexels.com/photos/1032650/pexels-photo-1032650.jpeg?auto=compress&cs=tinysrgb&w=400'],
      timestamp: new Date('2024-01-15T18:30:00'),
      likes: 24,
      comments: [
        {
          id: '1',
          userId: 'user1',
          userName: 'TravelSoul92',
          userAvatar: 'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=100',
          content: 'Absolutely stunning! Which beach is this exactly?',
          timestamp: new Date('2024-01-15T19:00:00'),
          likes: 3,
          replies: [],
          isLiked: false
        }
      ],
      visibility: 'public',
      tags: [
        { id: '1', name: 'sunset', color: 'orange', category: 'mood' },
        { id: '2', name: 'beach', color: 'blue', category: 'location' },
        { id: '3', name: 'photography', color: 'purple', category: 'activity' },
        { id: '4', name: 'peaceful', color: 'green', category: 'mood' }
      ],
      isLiked: true,
      isBookmarked: false,
      reactions: [
        { type: 'like', count: 15, users: [], isUserReacted: true },
        { type: 'love', count: 8, users: [], isUserReacted: false },
        { type: 'wow', count: 1, users: [], isUserReacted: false }
      ],
      views: 156,
      weather: {
        temperature: 28,
        condition: 'sunny',
        icon: '☀️',
        humidity: 65
      },
      mood: 'peaceful',
      travelBuddies: ['CosmicWanderer88'],
      isFeatured: true,
      altitude: 5,
      accuracy: 10
    },
    {
      id: '2',
      location: 'Manali, Himachal Pradesh',
      coordinates: { lat: 32.2396, lng: 77.1887 },
      title: 'Mountain Adventure Video',
      description: 'Epic video of our mountain trek through the beautiful valleys of Manali. The views were absolutely breathtaking! This 3-day trek was challenging but totally worth it.',
      mediaType: 'video',
      mediaUrls: ['https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'],
      timestamp: new Date('2024-01-10T14:20:00'),
      likes: 18,
      comments: [
        {
          id: '2',
          userId: 'user2',
          userName: 'MountainSeeker',
          userAvatar: 'https://images.pexels.com/photos/1043471/pexels-photo-1043471.jpeg?auto=compress&cs=tinysrgb&w=100',
          content: 'This looks incredible! How difficult was the trek?',
          timestamp: new Date('2024-01-10T15:00:00'),
          likes: 2,
          replies: [
            {
              id: '2-1',
              userId: 'user3',
              userName: 'Author',
              userAvatar: 'https://images.pexels.com/photos/1222271/pexels-photo-1222271.jpeg?auto=compress&cs=tinysrgb&w=100',
              content: 'It was moderate difficulty, took about 6 hours each day. Definitely bring proper trekking gear!',
              timestamp: new Date('2024-01-10T15:30:00'),
              likes: 1,
              replies: [],
              isLiked: false
            }
          ],
          isLiked: true
        }
      ],
      visibility: 'public',
      tags: [
        { id: '5', name: 'mountains', color: 'gray', category: 'location' },
        { id: '6', name: 'trekking', color: 'green', category: 'activity' },
        { id: '7', name: 'adventure', color: 'red', category: 'mood' },
        { id: '8', name: 'himachal', color: 'blue', category: 'location' }
      ],
      isLiked: false,
      isBookmarked: true,
      reactions: [
        { type: 'like', count: 12, users: [], isUserReacted: false },
        { type: 'wow', count: 6, users: [], isUserReacted: true }
      ],
      views: 234,
      weather: {
        temperature: 15,
        condition: 'cloudy',
        icon: '☁️',
        humidity: 80
      },
      mood: 'adventurous',
      altitude: 2050,
      accuracy: 5
    },
    {
      id: '3',
      location: 'Rishikesh, Uttarakhand',
      coordinates: { lat: 30.0869, lng: 78.2676 },
      title: 'Spiritual Journey Voice Note',
      description: 'Found peace by the Ganges. The yoga sessions and meditation were life-changing.',
      mediaType: 'voice',
      mediaUrls: ['voice-note-url'],
      timestamp: new Date('2024-01-05T08:15:00'),
      likes: 31,
      comments: [],
      visibility: 'friends',
      tags: [
        { id: '9', name: 'spiritual', color: 'purple', category: 'mood' },
        { id: '10', name: 'yoga', color: 'green', category: 'activity' },
        { id: '11', name: 'ganges', color: 'blue', category: 'location' },
        { id: '12', name: 'meditation', color: 'indigo', category: 'activity' }
      ],
      isLiked: true,
      isBookmarked: false,
      reactions: [
        { type: 'love', count: 20, users: [], isUserReacted: true },
        { type: 'like', count: 11, users: [], isUserReacted: false }
      ],
      views: 89,
      weather: {
        temperature: 22,
        condition: 'sunny',
        icon: '☀️',
        humidity: 55
      },
      mood: 'peaceful',
      altitude: 372,
      accuracy: 8
    }
  ];

  const [footprints, setFootprints] = useState(mockFootprints);

  const viewModes: ViewMode[] = [
    { type: 'grid', label: 'Grid', icon: Grid },
    { type: 'list', label: 'List', icon: List },
    { type: 'map', label: 'Map', icon: Map },
    { type: 'timeline', label: 'Timeline', icon: Clock },
    { type: 'masonry', label: 'Masonry', icon: Layers }
  ];

  const reactionEmojis = {
    like: '👍',
    love: '❤️',
    laugh: '😂',
    wow: '😮',
    sad: '😢',
    angry: '😠'
  };

  // Interactive Functions
  const handleLike = (id: string) => {
    setFootprints(prev => prev.map(fp => 
      fp.id === id 
        ? { 
            ...fp, 
            isLiked: !fp.isLiked, 
            likes: fp.isLiked ? fp.likes - 1 : fp.likes + 1,
            reactions: fp.reactions.map(r => 
              r.type === 'like' 
                ? { ...r, count: fp.isLiked ? r.count - 1 : r.count + 1, isUserReacted: !fp.isLiked }
                : r
            )
          }
        : fp
    ));
  };

  const handleReaction = (id: string, reactionType: FootprintReaction['type']) => {
    setFootprints(prev => prev.map(fp => 
      fp.id === id 
        ? {
            ...fp,
            reactions: fp.reactions.map(r => 
              r.type === reactionType
                ? { ...r, count: r.isUserReacted ? r.count - 1 : r.count + 1, isUserReacted: !r.isUserReacted }
                : { ...r, isUserReacted: false, count: r.isUserReacted ? r.count - 1 : r.count }
            )
          }
        : fp
    ));
  };

  const handleBookmark = (id: string) => {
    setFootprints(prev => prev.map(fp => 
      fp.id === id 
        ? { ...fp, isBookmarked: !fp.isBookmarked }
        : fp
    ));
  };

  const handleShare = async (footprint: Footprint) => {
    const shareData = {
      title: footprint.title,
      text: footprint.description,
      url: window.location.href
    };

    try {
      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        await navigator.clipboard.writeText(`${footprint.title} - ${footprint.description}`);
        alert('Footprint copied to clipboard!');
      }
    } catch (error) {
      console.error('Share failed:', error);
    }
  };

  const handleAddComment = (footprintId: string, content: string) => {
    const newComment: FootprintComment = {
      id: Date.now().toString(),
      userId: 'current-user',
      userName: 'You',
      userAvatar: 'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=100',
      content,
      timestamp: new Date(),
      likes: 0,
      replies: [],
      isLiked: false
    };

    setFootprints(prev => prev.map(fp => 
      fp.id === footprintId
        ? { ...fp, comments: [...fp.comments, newComment] }
        : fp
    ));
  };

  const handleEdit = (id: string) => {
    setFootprints(prev => prev.map(fp => 
      fp.id === id ? { ...fp, isEditing: true } : { ...fp, isEditing: false }
    ));
  };

  const handleSave = (id: string, newTitle: string, newDescription: string) => {
    setFootprints(prev => prev.map(fp => 
      fp.id === id 
        ? { ...fp, title: newTitle, description: newDescription, isEditing: false }
        : fp
    ));
  };

  const handleDelete = (id: string) => {
    if (confirm('Are you sure you want to delete this footprint?')) {
      setFootprints(prev => prev.filter(fp => fp.id !== id));
    }
  };

  const toggleAudio = (entryId: string) => {
    setPlayingAudio(playingAudio === entryId ? null : entryId);
  };

  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 24) return `${diffInHours}h ago`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays}d ago`;
  };

  const getTagColor = (category: string) => {
    const colors = {
      location: 'from-blue-400 to-cyan-500',
      activity: 'from-green-400 to-teal-500',
      mood: 'from-purple-400 to-pink-500',
      food: 'from-orange-400 to-red-500',
      transport: 'from-yellow-400 to-orange-500',
      custom: 'from-gray-400 to-gray-500'
    };
    return colors[category as keyof typeof colors] || colors.custom;
  };

  const filteredFootprints = footprints
    .filter(fp => {
      const matchesSearch = fp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           fp.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           fp.location.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesFilter = !filterTag || fp.tags.some(tag => tag.name === filterTag);
      const matchesSelectedTags = selectedTags.length === 0 || 
                                  selectedTags.every(selectedTag => 
                                    fp.tags.some(tag => tag.name === selectedTag)
                                  );
      return matchesSearch && matchesFilter && matchesSelectedTags;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'popular':
          return b.likes - a.likes;
        case 'trending':
          return b.views - a.views;
        case 'views':
          return b.views - a.views;
        default:
          return b.timestamp.getTime() - a.timestamp.getTime();
      }
    });

  const allTags = Array.from(new Set(footprints.flatMap(fp => fp.tags.map(tag => tag.name))));

  return (
    <div className="p-4 pb-20 lg:pb-4">
      {/* Enhanced Header with Analytics */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold text-white mb-1">My Footprints</h1>
          <div className="flex items-center space-x-4 text-sm text-gray-400">
            <span>{footprints.length} footprints</span>
            <span>•</span>
            <span>{footprints.reduce((sum, fp) => sum + fp.views, 0)} total views</span>
            <span>•</span>
            <span>{footprints.reduce((sum, fp) => sum + fp.likes, 0)} total likes</span>
          </div>
        </div>
        
        <button
          onClick={() => setShowCreateModal(true)}
          className="bg-gradient-to-r from-cyan-500 to-purple-500 p-3 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105"
        >
          <Plus className="h-5 w-5 text-white" />
        </button>
      </div>

      {/* Enhanced Search and Filter Bar */}
      <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-4 mb-6">
        <div className="flex flex-col lg:flex-row gap-4">
          {/* Search Bar */}
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search footprints..."
              className="w-full pl-10 pr-4 py-2 bg-black/20 border border-white/10 rounded-xl text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none"
            />
          </div>

          {/* Sort Dropdown */}
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as any)}
            className="px-4 py-2 bg-black/20 border border-white/10 rounded-xl text-white focus:border-cyan-400 focus:outline-none"
          >
            <option value="recent">Most Recent</option>
            <option value="popular">Most Popular</option>
            <option value="trending">Trending</option>
            <option value="views">Most Viewed</option>
          </select>

          {/* Filter Button */}
          <button
            onClick={() => setShowFilters(!showFilters)}
            className={`px-4 py-2 border rounded-xl transition-colors ${
              showFilters ? 'bg-cyan-500/20 border-cyan-400/30 text-cyan-400' : 'bg-black/20 border-white/10 text-gray-400'
            }`}
          >
            <Filter className="h-4 w-4" />
          </button>

          {/* View Mode Selector */}
          <div className="flex items-center space-x-1 bg-black/20 rounded-xl p-1">
            {viewModes.map((mode) => (
              <button
                key={mode.type}
                onClick={() => setViewMode(mode.type)}
                className={`p-2 rounded-lg transition-colors ${
                  viewMode === mode.type ? 'bg-cyan-500 text-white' : 'text-gray-400 hover:text-white'
                }`}
                title={mode.label}
              >
                <mode.icon className="h-4 w-4" />
              </button>
            ))}
          </div>
        </div>

        {/* Advanced Filters */}
        {showFilters && (
          <div className="mt-4 pt-4 border-t border-white/10">
            <div className="space-y-3">
              {/* Tag Filter */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">Filter by Tags</label>
                <div className="flex flex-wrap gap-2">
                  {allTags.map((tag) => (
                    <button
                      key={tag}
                      onClick={() => {
                        setSelectedTags(prev => 
                          prev.includes(tag) 
                            ? prev.filter(t => t !== tag)
                            : [...prev, tag]
                        );
                      }}
                      className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
                        selectedTags.includes(tag)
                          ? 'bg-cyan-500/20 text-cyan-400 border border-cyan-400/30'
                          : 'bg-white/10 text-gray-400 border border-white/10 hover:border-white/20'
                      }`}
                    >
                      #{tag}
                    </button>
                  ))}
                </div>
              </div>

              {/* Privacy Filter */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">Visibility</label>
                <div className="flex space-x-2">
                  {['all', 'public', 'private', 'friends'].map((visibility) => (
                    <button
                      key={visibility}
                      className="px-3 py-1 bg-white/10 rounded-lg text-xs text-gray-400 hover:bg-white/20 transition-colors"
                    >
                      {visibility.charAt(0).toUpperCase() + visibility.slice(1)}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 mb-6">
        <div className="bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-2xl p-4 border border-cyan-400/30">
          <div className="flex items-center space-x-2">
            <MapPin className="h-5 w-5 text-cyan-400" />
            <div>
              <div className="text-lg font-bold text-cyan-400">{footprints.length}</div>
              <div className="text-xs text-gray-400">Total Footprints</div>
            </div>
          </div>
        </div>
        <div className="bg-gradient-to-r from-pink-500/10 to-red-500/10 rounded-2xl p-4 border border-pink-400/30">
          <div className="flex items-center space-x-2">
            <Heart className="h-5 w-5 text-pink-400" />
            <div>
              <div className="text-lg font-bold text-pink-400">{footprints.reduce((sum, fp) => sum + fp.likes, 0)}</div>
              <div className="text-xs text-gray-400">Total Likes</div>
            </div>
          </div>
        </div>
        <div className="bg-gradient-to-r from-green-500/10 to-teal-500/10 rounded-2xl p-4 border border-green-400/30">
          <div className="flex items-center space-x-2">
            <Eye className="h-5 w-5 text-green-400" />
            <div>
              <div className="text-lg font-bold text-green-400">{footprints.reduce((sum, fp) => sum + fp.views, 0)}</div>
              <div className="text-xs text-gray-400">Total Views</div>
            </div>
          </div>
        </div>
        <div className="bg-gradient-to-r from-purple-500/10 to-indigo-500/10 rounded-2xl p-4 border border-purple-400/30">
          <div className="flex items-center space-x-2">
            <MessageCircle className="h-5 w-5 text-purple-400" />
            <div>
              <div className="text-lg font-bold text-purple-400">{footprints.reduce((sum, fp) => sum + fp.comments.length, 0)}</div>
              <div className="text-xs text-gray-400">Total Comments</div>
            </div>
          </div>
        </div>
      </div>

      {/* Footprints Display */}
      {viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {filteredFootprints.map((footprint) => (
            <FootprintCard
              key={footprint.id}
              footprint={footprint}
              onLike={handleLike}
              onBookmark={handleBookmark}
              onShare={handleShare}
              onEdit={handleEdit}
              onSave={handleSave}
              onDelete={handleDelete}
              onReaction={handleReaction}
              onView={setSelectedFootprint}
              onAddComment={handleAddComment}
              playingAudio={playingAudio}
              onToggleAudio={toggleAudio}
              showComments={showComments}
              onToggleComments={setShowComments}
              formatTimeAgo={formatTimeAgo}
              getTagColor={getTagColor}
              reactionEmojis={reactionEmojis}
            />
          ))}
        </div>
      )}

      {viewMode === 'list' && (
        <div className="space-y-4">
          {filteredFootprints.map((footprint) => (
            <FootprintListItem
              key={footprint.id}
              footprint={footprint}
              onLike={handleLike}
              onBookmark={handleBookmark}
              onShare={handleShare}
              onView={setSelectedFootprint}
              formatTimeAgo={formatTimeAgo}
              getTagColor={getTagColor}
            />
          ))}
        </div>
      )}

      {viewMode === 'timeline' && (
        <div className="space-y-6">
          <TimelineView 
            footprints={filteredFootprints}
            onLike={handleLike}
            onView={setSelectedFootprint}
            formatTimeAgo={formatTimeAgo}
          />
        </div>
      )}

      {viewMode === 'map' && (
        <div className="bg-white/5 backdrop-blur-sm rounded-3xl border border-white/10 p-6 text-center">
          <Map className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-white mb-2">Interactive Map View</h3>
          <p className="text-gray-400 text-sm">
            Your footprints would be displayed on an interactive map with clustering and location details.
          </p>
        </div>
      )}

      {viewMode === 'masonry' && (
        <div className="columns-1 md:columns-2 lg:columns-3 gap-4 space-y-4">
          {filteredFootprints.map((footprint) => (
            <FootprintMasonryCard
              key={footprint.id}
              footprint={footprint}
              onLike={handleLike}
              onView={setSelectedFootprint}
              formatTimeAgo={formatTimeAgo}
            />
          ))}
        </div>
      )}

      {/* Empty State */}
      {filteredFootprints.length === 0 && (
        <div className="text-center py-12">
          <MapPin className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-white mb-2">No Footprints Found</h3>
          <p className="text-gray-400 text-sm mb-4">
            {searchQuery || selectedTags.length > 0 
              ? 'Try adjusting your search or filters'
              : 'Start your journey by creating your first footprint!'
            }
          </p>
          <button
            onClick={() => setShowCreateModal(true)}
            className="bg-gradient-to-r from-cyan-500 to-purple-500 px-6 py-3 rounded-2xl font-semibold text-white"
          >
            Create First Footprint
          </button>
        </div>
      )}

      {/* Create Footprint Modal */}
      {showCreateModal && (
        <CreateFootprintModal 
          onClose={() => setShowCreateModal(false)}
          onAdd={(newFootprint) => {
            const footprint: Footprint = {
              ...newFootprint,
              id: Date.now().toString(),
              likes: 0,
              comments: [],
              isLiked: false,
              isBookmarked: false,
              reactions: [
                { type: 'like', count: 0, users: [], isUserReacted: false },
                { type: 'love', count: 0, users: [], isUserReacted: false }
              ],
              views: 0
            };
            setFootprints(prev => [footprint, ...prev]);
          }}
        />
      )}

      {/* View Footprint Modal */}
      {selectedFootprint && (
        <ViewFootprintModal
          footprint={selectedFootprint}
          onClose={() => setSelectedFootprint(null)}
          onLike={handleLike}
          onShare={handleShare}
          onAddComment={handleAddComment}
          formatTimeAgo={formatTimeAgo}
          getTagColor={getTagColor}
          reactionEmojis={reactionEmojis}
          onReaction={handleReaction}
        />
      )}
    </div>
  );
}

// FootprintCard Component with all features
function FootprintCard({ 
  footprint, 
  onLike, 
  onBookmark, 
  onShare, 
  onEdit, 
  onSave, 
  onDelete, 
  onReaction,
  onView, 
  onAddComment,
  playingAudio,
  onToggleAudio,
  showComments,
  onToggleComments,
  formatTimeAgo,
  getTagColor,
  reactionEmojis
}: any) {
  const [editTitle, setEditTitle] = useState(footprint.title);
  const [editDescription, setEditDescription] = useState(footprint.description);
  const [commentText, setCommentText] = useState('');
  const [showReactions, setShowReactions] = useState(false);

  return (
    <div className="bg-white/5 backdrop-blur-sm rounded-3xl border border-white/10 overflow-hidden hover:border-white/20 transition-all duration-300 hover:scale-105">
      {/* Media Section */}
      <div className="relative h-48 overflow-hidden">
        {footprint.mediaType === 'photo' && (
          <img
            src={footprint.mediaUrls[0]}
            alt={footprint.title}
            className="w-full h-full object-cover"
          />
        )}
        
        {footprint.mediaType === 'video' && (
          <div className="relative w-full h-full">
            <video
              src={footprint.mediaUrls[0]}
              className="w-full h-full object-cover"
              poster="https://images.pexels.com/photos/1366919/pexels-photo-1366919.jpeg?auto=compress&cs=tinysrgb&w=400"
            />
            <div className="absolute inset-0 bg-black/30 flex items-center justify-center">
              <div className="bg-white/20 backdrop-blur-sm rounded-full p-4 hover:bg-white/30 transition-colors cursor-pointer">
                <Play className="h-8 w-8 text-white" />
              </div>
            </div>
            <div className="absolute top-3 left-3 bg-black/50 backdrop-blur-sm px-2 py-1 rounded-full flex items-center space-x-1">
              <Video className="h-3 w-3 text-white" />
              <span className="text-white text-xs">Video</span>
            </div>
          </div>
        )}

        {footprint.mediaType === 'voice' && (
          <div className="w-full h-full bg-gradient-to-br from-purple-500/20 via-pink-500/20 to-indigo-500/20 flex items-center justify-center">
            <div className="text-center">
              <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center">
                <Mic className="h-8 w-8 text-white" />
              </div>
              <span className="text-white text-sm">Voice Note</span>
            </div>
          </div>
        )}
        
        {/* Status Indicators */}
        <div className="absolute top-3 right-3 flex space-x-2">
          {footprint.isFeatured && (
            <div className="bg-yellow-500/20 backdrop-blur-sm px-2 py-1 rounded-full border border-yellow-400/30">
              <Star className="h-3 w-3 text-yellow-400" />
            </div>
          )}
          <div className={`px-2 py-1 rounded-full text-xs font-medium backdrop-blur-sm ${
            footprint.visibility === 'public' 
              ? 'bg-green-500/20 text-green-400 border border-green-400/30'
              : footprint.visibility === 'friends'
              ? 'bg-blue-500/20 text-blue-400 border border-blue-400/30'
              : 'bg-gray-500/20 text-gray-400 border border-gray-400/30'
          }`}>
            <Eye className="h-3 w-3 inline mr-1" />
            {footprint.visibility}
          </div>
        </div>

        {/* Weather Indicator */}
        {footprint.weather && (
          <div className="absolute bottom-3 left-3 bg-black/50 backdrop-blur-sm px-2 py-1 rounded-full flex items-center space-x-1">
            <span className="text-sm">{footprint.weather.icon}</span>
            <span className="text-white text-xs">{footprint.weather.temperature}°C</span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="p-4">
        <div className="flex items-start justify-between mb-2">
          <div className="flex-1">
            {footprint.isEditing ? (
              <div className="space-y-2">
                <input
                  type="text"
                  value={editTitle}
                  onChange={(e) => setEditTitle(e.target.value)}
                  className="w-full px-2 py-1 bg-black/20 border border-white/10 rounded text-white text-lg font-semibold focus:border-cyan-400 focus:outline-none"
                />
                <textarea
                  value={editDescription}
                  onChange={(e) => setEditDescription(e.target.value)}
                  className="w-full px-2 py-1 bg-black/20 border border-white/10 rounded text-gray-300 text-sm resize-none focus:border-cyan-400 focus:outline-none"
                  rows={3}
                />
              </div>
            ) : (
              <>
                <h3 className="text-lg font-semibold text-white mb-1">{footprint.title}</h3>
                <div className="flex items-center space-x-2 text-gray-400 text-sm mb-2">
                  <MapPin className="h-3 w-3" />
                  <span>{footprint.location}</span>
                  {footprint.altitude && (
                    <>
                      <span>•</span>
                      <Mountain className="h-3 w-3" />
                      <span>{footprint.altitude}m</span>
                    </>
                  )}
                </div>
              </>
            )}
          </div>
          <div className="flex items-center space-x-1 text-gray-400 text-xs">
            <Clock className="h-3 w-3" />
            <span>{formatTimeAgo(footprint.timestamp)}</span>
          </div>
        </div>

        {!footprint.isEditing && (
          <p className="text-gray-300 text-sm mb-3 line-clamp-2">{footprint.description}</p>
        )}

        {/* Travel Buddies */}
        {footprint.travelBuddies && footprint.travelBuddies.length > 0 && (
          <div className="flex items-center space-x-2 mb-3">
            <Users className="h-3 w-3 text-gray-400" />
            <span className="text-gray-400 text-xs">with</span>
            {footprint.travelBuddies.map((buddy, index) => (
              <span key={index} className="text-cyan-400 text-xs">@{buddy}</span>
            ))}
          </div>
        )}

        {/* Voice Note Player */}
        {footprint.mediaType === 'voice' && (
          <div className="bg-black/20 rounded-xl p-3 mb-3">
            <div className="flex items-center space-x-3">
              <button
                onClick={() => onToggleAudio(footprint.id)}
                className="w-10 h-10 rounded-full bg-gradient-to-r from-purple-400 to-pink-500 flex items-center justify-center"
              >
                {playingAudio === footprint.id ? (
                  <Volume2 className="h-5 w-5 text-white" />
                ) : (
                  <Play className="h-5 w-5 text-white ml-1" />
                )}
              </button>
              <div className="flex-1">
                <div className="w-full h-2 bg-gray-700 rounded-full">
                  <div className="w-1/3 h-2 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full"></div>
                </div>
              </div>
              <span className="text-xs text-gray-400">2:34</span>
            </div>
          </div>
        )}

        {/* Tags */}
        <div className="flex flex-wrap gap-1 mb-3">
          {footprint.tags.slice(0, 4).map((tag: any, index: number) => (
            <span
              key={index}
              className={`px-2 py-1 bg-gradient-to-r ${getTagColor(tag.category)} bg-opacity-20 rounded-full text-xs border border-white/20`}
            >
              #{tag.name}
            </span>
          ))}
          {footprint.tags.length > 4 && (
            <span className="px-2 py-1 bg-white/10 rounded-full text-xs text-gray-400">
              +{footprint.tags.length - 4} more
            </span>
          )}
        </div>

        {/* Stats */}
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-4 text-xs text-gray-400">
            <div className="flex items-center space-x-1">
              <Eye className="h-3 w-3" />
              <span>{footprint.views}</span>
            </div>
            <div className="flex items-center space-x-1">
              <MessageCircle className="h-3 w-3" />
              <span>{footprint.comments.length}</span>
            </div>
          </div>
          
          {footprint.mood && (
            <div className="flex items-center space-x-1 text-xs">
              <span className="text-gray-400">Feeling</span>
              <span className="text-purple-400">{footprint.mood}</span>
            </div>
          )}
        </div>

        {/* Reactions */}
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-1">
            {footprint.reactions.filter((r: any) => r.count > 0).map((reaction: any) => (
              <button
                key={reaction.type}
                onClick={() => onReaction(footprint.id, reaction.type)}
                className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs transition-colors ${
                  reaction.isUserReacted 
                    ? 'bg-blue-500/20 text-blue-400 border border-blue-400/30' 
                    : 'bg-white/10 text-gray-400 hover:bg-white/20'
                }`}
              >
                <span>{reactionEmojis[reaction.type as keyof typeof reactionEmojis]}</span>
                <span>{reaction.count}</span>
              </button>
            ))}
          </div>

          <div className="relative">
            <button
              onClick={() => setShowReactions(!showReactions)}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <Smile className="h-4 w-4" />
            </button>
            
            {showReactions && (
              <div className="absolute bottom-8 right-0 bg-black/90 backdrop-blur-md rounded-2xl p-2 border border-white/20 flex space-x-1">
                {Object.entries(reactionEmojis).map(([type, emoji]) => (
                  <button
                    key={type}
                    onClick={() => {
                      onReaction(footprint.id, type as any);
                      setShowReactions(false);
                    }}
                    className="w-8 h-8 rounded-full hover:bg-white/20 transition-colors flex items-center justify-center"
                  >
                    {emoji}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Actions */}
        <div className="flex items-center justify-between">
          {footprint.isEditing ? (
            <div className="flex space-x-2">
              <button
                onClick={() => onSave(footprint.id, editTitle, editDescription)}
                className="flex items-center space-x-1 px-3 py-1 bg-green-500/20 text-green-400 rounded-lg text-sm hover:bg-green-500/30 transition-colors"
              >
                <Save className="h-3 w-3" />
                <span>Save</span>
              </button>
              <button
                onClick={() => onEdit(footprint.id)}
                className="flex items-center space-x-1 px-3 py-1 bg-gray-500/20 text-gray-400 rounded-lg text-sm hover:bg-gray-500/30 transition-colors"
              >
                <X className="h-3 w-3" />
                <span>Cancel</span>
              </button>
            </div>
          ) : (
            <div className="flex items-center space-x-3">
              <button
                onClick={() => onLike(footprint.id)}
                className={`flex items-center space-x-1 transition-colors ${
                  footprint.isLiked ? 'text-pink-400' : 'text-gray-400 hover:text-pink-400'
                }`}
              >
                <Heart className={`h-4 w-4 ${footprint.isLiked ? 'fill-current' : ''}`} />
                <span className="text-sm">{footprint.likes}</span>
              </button>
              
              <button 
                onClick={() => onToggleComments(showComments === footprint.id ? null : footprint.id)}
                className="flex items-center space-x-1 text-gray-400 hover:text-blue-400 transition-colors"
              >
                <MessageCircle className="h-4 w-4" />
                <span className="text-sm">{footprint.comments.length}</span>
              </button>

              <button
                onClick={() => onBookmark(footprint.id)}
                className={`transition-colors ${
                  footprint.isBookmarked ? 'text-yellow-400' : 'text-gray-400 hover:text-yellow-400'
                }`}
              >
                <Bookmark className={`h-4 w-4 ${footprint.isBookmarked ? 'fill-current' : ''}`} />
              </button>
            </div>
          )}
          
          {!footprint.isEditing && (
            <div className="flex items-center space-x-2">
              <button
                onClick={() => onEdit(footprint.id)}
                className="text-gray-400 hover:text-blue-400 transition-colors"
              >
                <Edit className="h-4 w-4" />
              </button>
              <button
                onClick={() => onShare(footprint)}
                className="text-gray-400 hover:text-green-400 transition-colors"
              >
                <Share className="h-4 w-4" />
              </button>
              <button
                onClick={() => onDelete(footprint.id)}
                className="text-gray-400 hover:text-red-400 transition-colors"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          )}
        </div>

        {/* Comments Section */}
        {showComments === footprint.id && (
          <div className="mt-4 pt-4 border-t border-white/10">
            <div className="space-y-3 mb-4">
              {footprint.comments.map((comment: any) => (
                <div key={comment.id} className="flex items-start space-x-3">
                  <img
                    src={comment.userAvatar}
                    alt={comment.userName}
                    className="w-6 h-6 rounded-full object-cover"
                  />
                  <div className="flex-1">
                    <div className="bg-white/10 rounded-lg p-2">
                      <div className="flex items-center space-x-2 mb-1">
                        <span className="text-sm font-medium text-white">{comment.userName}</span>
                        <span className="text-xs text-gray-400">{formatTimeAgo(comment.timestamp)}</span>
                      </div>
                      <p className="text-sm text-gray-300">{comment.content}</p>
                    </div>
                    {comment.replies.length > 0 && (
                      <div className="ml-4 mt-2 space-y-2">
                        {comment.replies.map((reply: any) => (
                          <div key={reply.id} className="flex items-start space-x-2">
                            <img
                              src={reply.userAvatar}
                              alt={reply.userName}
                              className="w-5 h-5 rounded-full object-cover"
                            />
                            <div className="bg-white/5 rounded-lg p-2">
                              <div className="flex items-center space-x-2 mb-1">
                                <span className="text-xs font-medium text-white">{reply.userName}</span>
                                <span className="text-xs text-gray-400">{formatTimeAgo(reply.timestamp)}</span>
                              </div>
                              <p className="text-xs text-gray-300">{reply.content}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
            
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={commentText}
                onChange={(e) => setCommentText(e.target.value)}
                placeholder="Add a comment..."
                className="flex-1 px-3 py-2 bg-black/20 border border-white/10 rounded-lg text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none"
              />
              <button
                onClick={() => {
                  if (commentText.trim()) {
                    onAddComment(footprint.id, commentText);
                    setCommentText('');
                  }
                }}
                className="p-2 bg-cyan-500 rounded-lg text-white hover:bg-cyan-600 transition-colors"
              >
                <Send className="h-4 w-4" />
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// Additional helper components
function FootprintListItem({ footprint, onLike, onBookmark, onShare, onView, formatTimeAgo, getTagColor }: any) {
  return (
    <div className="bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 p-4 hover:border-white/20 transition-all duration-300">
      <div className="flex items-start space-x-4">
        <div className="relative w-16 h-16 rounded-xl overflow-hidden flex-shrink-0">
          {footprint.mediaType === 'photo' ? (
            <img
              src={footprint.mediaUrls[0]}
              alt={footprint.title}
              className="w-full h-full object-cover"
            />
          ) : footprint.mediaType === 'video' ? (
            <>
              <video
                src={footprint.mediaUrls[0]}
                className="w-full h-full object-cover"
                poster="https://images.pexels.com/photos/1366919/pexels-photo-1366919.jpeg?auto=compress&cs=tinysrgb&w=100"
              />
              <div className="absolute inset-0 bg-black/30 flex items-center justify-center">
                <Play className="h-4 w-4 text-white" />
              </div>
            </>
          ) : (
            <div className="w-full h-full bg-gradient-to-br from-purple-500/20 to-pink-500/20 flex items-center justify-center">
              <Mic className="h-6 w-6 text-purple-400" />
            </div>
          )}
        </div>
        
        <div className="flex-1">
          <div className="flex items-start justify-between mb-2">
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-white">{footprint.title}</h3>
              <div className="flex items-center space-x-1 text-gray-400 text-sm">
                <MapPin className="h-3 w-3" />
                <span>{footprint.location}</span>
              </div>
            </div>
            <span className="text-xs text-gray-400">{formatTimeAgo(footprint.timestamp)}</span>
          </div>
          
          <p className="text-gray-300 text-sm mb-2">{footprint.description}</p>
          
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => onLike(footprint.id)}
                className={`flex items-center space-x-1 transition-colors ${
                  footprint.isLiked ? 'text-pink-400' : 'text-gray-400 hover:text-pink-400'
                }`}
              >
                <Heart className={`h-4 w-4 ${footprint.isLiked ? 'fill-current' : ''}`} />
                <span className="text-sm">{footprint.likes}</span>
              </button>
              
              <div className="flex items-center space-x-1 text-gray-400 text-sm">
                <MessageCircle className="h-4 w-4" />
                <span>{footprint.comments.length}</span>
              </div>
              
              <div className="flex items-center space-x-1 text-gray-400 text-sm">
                <Eye className="h-4 w-4" />
                <span>{footprint.views}</span>
              </div>
            </div>
            
            <div className={`px-2 py-1 rounded-full text-xs font-medium ${
              footprint.visibility === 'public' 
                ? 'bg-green-500/20 text-green-400'
                : footprint.visibility === 'friends'
                ? 'bg-blue-500/20 text-blue-400'
                : 'bg-gray-500/20 text-gray-400'
            }`}>
              {footprint.visibility}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function TimelineView({ footprints, onLike, onView, formatTimeAgo }: any) {
  const groupedByDate = footprints.reduce((groups: any, footprint: any) => {
    const date = footprint.timestamp.toDateString();
    if (!groups[date]) {
      groups[date] = [];
    }
    groups[date].push(footprint);
    return groups;
  }, {});

  return (
    <div className="space-y-8">
      {Object.entries(groupedByDate).map(([date, dayFootprints]: [string, any]) => (
        <div key={date}>
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-purple-500 flex items-center justify-center">
              <Calendar className="h-4 w-4 text-white" />
            </div>
            <h3 className="text-lg font-semibold text-white">{date}</h3>
          </div>
          
          <div className="ml-11 space-y-4">
            {dayFootprints.map((footprint: any) => (
              <div key={footprint.id} className="bg-white/5 rounded-2xl p-4 border border-white/10">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 rounded-lg overflow-hidden">
                    <img
                      src={footprint.mediaUrls[0]}
                      alt={footprint.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="flex-1">
                    <h4 className="text-white font-medium">{footprint.title}</h4>
                    <p className="text-gray-400 text-sm">{footprint.location}</p>
                  </div>
                  <div className="text-xs text-gray-400">{formatTimeAgo(footprint.timestamp)}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
}

function FootprintMasonryCard({ footprint, onLike, onView, formatTimeAgo }: any) {
  return (
    <div className="break-inside-avoid bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 overflow-hidden hover:border-white/20 transition-all duration-300 mb-4">
      <div className="relative">
        <img
          src={footprint.mediaUrls[0]}
          alt={footprint.title}
          className="w-full object-cover"
          style={{ height: `${200 + Math.random() * 200}px` }}
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent" />
        <div className="absolute bottom-3 left-3 right-3">
          <h3 className="text-white font-semibold text-sm mb-1">{footprint.title}</h3>
          <div className="flex items-center justify-between">
            <span className="text-gray-200 text-xs">{footprint.location}</span>
            <button
              onClick={() => onLike(footprint.id)}
              className={`flex items-center space-x-1 ${
                footprint.isLiked ? 'text-pink-400' : 'text-white'
              }`}
            >
              <Heart className={`h-3 w-3 ${footprint.isLiked ? 'fill-current' : ''}`} />
              <span className="text-xs">{footprint.likes}</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// Enhanced Create Modal and View Modal would be implemented here
// Due to length constraints, I'll create simplified versions

function CreateFootprintModal({ onClose, onAdd }: any) {
  const [formData, setFormData] = useState({
    title: '',
    location: '',
    description: '',
    mediaType: 'photo' as const,
    mediaUrls: [''],
    visibility: 'public' as const,
    tags: [] as any[],
    mood: '',
    travelBuddies: [] as string[]
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newFootprint = {
      ...formData,
      coordinates: { lat: 0, lng: 0 },
      timestamp: new Date(),
      weather: {
        temperature: 25,
        condition: 'sunny' as const,
        icon: '☀️',
        humidity: 60
      }
    };
    onAdd(newFootprint);
    onClose();
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="bg-slate-900/95 backdrop-blur-md rounded-3xl border border-white/20 max-w-md w-full max-h-[80vh] overflow-y-auto">
        <div className="p-6">
          <h2 className="text-xl font-bold text-white mb-4">Create Footprint</h2>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <input
              type="text"
              placeholder="Footprint title"
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              className="w-full px-4 py-3 bg-black/20 border border-white/10 rounded-2xl text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none"
              required
            />
            
            <input
              type="text"
              placeholder="Location"
              value={formData.location}
              onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
              className="w-full px-4 py-3 bg-black/20 border border-white/10 rounded-2xl text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none"
              required
            />
            
            <textarea
              placeholder="Description"
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="w-full px-4 py-3 bg-black/20 border border-white/10 rounded-2xl text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none resize-none"
              rows={3}
              required
            />

            <div className="flex space-x-3 pt-4">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 px-6 py-3 border border-white/20 rounded-2xl text-gray-300 hover:bg-white/5 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="flex-1 bg-gradient-to-r from-cyan-500 to-purple-500 px-6 py-3 rounded-2xl font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-300"
              >
                Create Footprint
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

function ViewFootprintModal({ footprint, onClose, onLike, onShare, onAddComment, formatTimeAgo, getTagColor, reactionEmojis, onReaction }: any) {
  return (
    <div className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="bg-slate-900/95 backdrop-blur-md rounded-3xl border border-white/20 max-w-md w-full max-h-[80vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-white">{footprint.title}</h2>
            <button
              onClick={onClose}
              className="p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors"
            >
              <X className="h-5 w-5 text-white" />
            </button>
          </div>

          <div className="mb-4">
            <img
              src={footprint.mediaUrls[0]}
              alt={footprint.title}
              className="w-full h-48 object-cover rounded-2xl"
            />
          </div>

          <div className="space-y-4">
            <div>
              <h3 className="text-white font-medium mb-2">Description</h3>
              <p className="text-gray-300 text-sm">{footprint.description}</p>
            </div>

            <div>
              <h3 className="text-white font-medium mb-2">Location</h3>
              <div className="flex items-center space-x-2 text-gray-300 text-sm">
                <MapPin className="h-4 w-4" />
                <span>{footprint.location}</span>
              </div>
            </div>

            <div className="flex flex-wrap gap-2">
              {footprint.tags.map((tag: any, index: number) => (
                <span
                  key={index}
                  className={`px-3 py-1 bg-gradient-to-r ${getTagColor(tag.category)} bg-opacity-20 rounded-full text-xs border border-white/20`}
                >
                  #{tag.name}
                </span>
              ))}
            </div>

            <div className="flex items-center justify-between pt-4 border-t border-white/10">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => onLike(footprint.id)}
                  className={`flex items-center space-x-1 transition-colors ${
                    footprint.isLiked ? 'text-pink-400' : 'text-gray-400 hover:text-pink-400'
                  }`}
                >
                  <Heart className={`h-5 w-5 ${footprint.isLiked ? 'fill-current' : ''}`} />
                  <span>{footprint.likes}</span>
                </button>
                
                <div className="flex items-center space-x-1 text-gray-400">
                  <MessageCircle className="h-5 w-5" />
                  <span>{footprint.comments.length}</span>
                </div>
              </div>
              
              <button
                onClick={() => onShare(footprint)}
                className="flex items-center space-x-1 px-3 py-2 bg-gradient-to-r from-green-500 to-teal-500 rounded-xl text-white text-sm font-medium hover:shadow-lg transition-all duration-300"
              >
                <Share className="h-4 w-4" />
                <span>Share</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default FootprintsPage;